Overview
========

The ccxt library is a collection of available crypto *exchanges* or exchange classes. Each class implements the public and private API for a particular crypto exchange. All exchanges are derived from the base Exchange class and share a set of common methods. To access a particular exchange from ccxt library you need to create an instance of corresponding exchange class. Supported exchanges are updated frequently and new exchanges are added regularly.

Full public and private HTTP REST APIs for all exchanges are implemented. WebSocket and FIX implementations in JavaScript, PHP, Python and other languages coming soon.

-  `Exchanges <#exchanges>`__
-  `Markets <#markets>`__
-  `API Methods / Endpoints <#api-methods--endpoints>`__
-  `Market Data <#market-data>`__
-  `Trading <#trading>`__

Exchanges
=========

The ccxt library currently supports the following 86 cryptocurrency exchange markets and trading APIs:

+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
|                        | id                   | name                                                           | ver   | doc                                                                                              | countries                                  |
+========================+======================+================================================================+=======+==================================================================================================+============================================+
| |_1broker|             | _1broker             | `1Broker <https://1broker.com>`__                              | 2     | `API <https://1broker.com/?c=en/content/api-documentation>`__                                    | US                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |_1btcxe|              | _1btcxe              | `1BTCXE <https://1btcxe.com>`__                                | \*    | `API <https://1btcxe.com/api-docs.php>`__                                                        | Panama                                     |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |acx|                  | acx                  | `ACX <https://acx.io>`__                                       | 2     | `API <https://acx.io/documents/api_v2>`__                                                        | Australia                                  |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |anxpro|               | anxpro               | `ANXPro <https://anxpro.com>`__                                | 2     | `API <http://docs.anxv2.apiary.io>`__                                                            | Japan, Singapore, Hong Kong, New Zealand   |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |binance|              | binance              | `Binance <https://www.binance.com>`__                          | 1     | `API <https://www.binance.com/restapipub.html>`__                                                | China                                      |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bit2c|                | bit2c                | `Bit2C <https://www.bit2c.co.il>`__                            | \*    | `API <https://www.bit2c.co.il/home/api>`__                                                       | Israel                                     |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bitbay|               | bitbay               | `BitBay <https://bitbay.net>`__                                | \*    | `API <https://bitbay.net/public-api>`__                                                          | Poland, EU                                 |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bitcoincoid|          | bitcoincoid          | `Bitcoin.co.id <https://www.bitcoin.co.id>`__                  | \*    | `API <https://vip.bitcoin.co.id/downloads/BITCOINCOID-API-DOCUMENTATION.pdf>`__                  | Indonesia                                  |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bitfinex|             | bitfinex             | `Bitfinex <https://www.bitfinex.com>`__                        | 1     | `API <https://bitfinex.readme.io/v1/docs>`__                                                     | US                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bitfinex2|            | bitfinex2            | `Bitfinex v2 <https://www.bitfinex.com>`__                     | 2     | `API <https://bitfinex.readme.io/v2/docs>`__                                                     | US                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bitflyer|             | bitflyer             | `bitFlyer <https://bitflyer.jp>`__                             | 1     | `API <https://bitflyer.jp/API>`__                                                                | Japan                                      |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bithumb|              | bithumb              | `Bithumb <https://www.bithumb.com>`__                          | \*    | `API <https://www.bithumb.com/u1/US127>`__                                                       | South Korea                                |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bitlish|              | bitlish              | `bitlish <https://bitlish.com>`__                              | 1     | `API <https://bitlish.com/api>`__                                                                | UK, EU, Russia                             |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bitmarket|            | bitmarket            | `BitMarket <https://www.bitmarket.pl>`__                       | \*    | `API <https://www.bitmarket.net/docs.php?file=api_public.html>`__                                | Poland, EU                                 |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bitmex|               | bitmex               | `BitMEX <https://www.bitmex.com>`__                            | 1     | `API <https://www.bitmex.com/app/apiOverview>`__                                                 | Seychelles                                 |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bitso|                | bitso                | `Bitso <https://bitso.com>`__                                  | 3     | `API <https://bitso.com/api_info>`__                                                             | Mexico                                     |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bitstamp1|            | bitstamp1            | `Bitstamp v1 <https://www.bitstamp.net>`__                     | 1     | `API <https://www.bitstamp.net/api>`__                                                           | UK                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bitstamp|             | bitstamp             | `Bitstamp <https://www.bitstamp.net>`__                        | 2     | `API <https://www.bitstamp.net/api>`__                                                           | UK                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bittrex|              | bittrex              | `Bittrex <https://bittrex.com>`__                              | 1.1   | `API <https://bittrex.com/Home/Api>`__                                                           | US                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bl3p|                 | bl3p                 | `BL3P <https://bl3p.eu>`__                                     | 1     | `API <https://github.com/BitonicNL/bl3p-api/tree/master/docs>`__                                 | Netherlands, EU                            |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bleutrade|            | bleutrade            | `Bleutrade <https://bleutrade.com>`__                          | 2     | `API <https://bleutrade.com/help/API>`__                                                         | Brazil                                     |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |btcchina|             | btcchina             | `BTCChina <https://www.btcchina.com>`__                        | 1     | `API <https://www.btcchina.com/apidocs>`__                                                       | China                                      |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |btcexchange|          | btcexchange          | `BTCExchange <https://www.btcexchange.ph>`__                   | \*    | `API <https://github.com/BTCTrader/broker-api-docs>`__                                           | Philippines                                |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |btcmarkets|           | btcmarkets           | `BTC Markets <https://btcmarkets.net/>`__                      | \*    | `API <https://github.com/BTCMarkets/API>`__                                                      | Australia                                  |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |btctradeua|           | btctradeua           | `BTC Trade UA <https://btc-trade.com.ua>`__                    | \*    | `API <https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit>`__   | Ukraine                                    |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |btcturk|              | btcturk              | `BTCTurk <https://www.btcturk.com>`__                          | \*    | `API <https://github.com/BTCTrader/broker-api-docs>`__                                           | Turkey                                     |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |btcx|                 | btcx                 | `BTCX <https://btc-x.is>`__                                    | 1     | `API <https://btc-x.is/custom/api-document.html>`__                                              | Iceland, US, EU                            |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bter|                 | bter                 | `Bter <https://bter.com>`__                                    | 2     | `API <https://bter.com/api2>`__                                                                  | British Virgin Islands, China              |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |bxinth|               | bxinth               | `BX.in.th <https://bx.in.th>`__                                | \*    | `API <https://bx.in.th/info/api>`__                                                              | Thailand                                   |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |ccex|                 | ccex                 | `C-CEX <https://c-cex.com>`__                                  | \*    | `API <https://c-cex.com/?id=api>`__                                                              | Germany, EU                                |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |cex|                  | cex                  | `CEX.IO <https://cex.io>`__                                    | \*    | `API <https://cex.io/cex-api>`__                                                                 | UK, EU, Cyprus, Russia                     |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |chbtc|                | chbtc                | `CHBTC <https://trade.chbtc.com/api>`__                        | 1     | `API <https://www.chbtc.com/i/developer>`__                                                      | China                                      |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |chilebit|             | chilebit             | `ChileBit <https://chilebit.net>`__                            | 1     | `API <https://blinktrade.com/docs>`__                                                            | Chile                                      |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |coincheck|            | coincheck            | `coincheck <https://coincheck.com>`__                          | \*    | `API <https://coincheck.com/documents/exchange/api>`__                                           | Japan, Indonesia                           |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |coinfloor|            | coinfloor            | `coinfloor <https://www.coinfloor.co.uk>`__                    | \*    | `API <https://github.com/coinfloor/api>`__                                                       | UK                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |coingi|               | coingi               | `Coingi <https://coingi.com>`__                                | \*    | `API <http://docs.coingi.apiary.io/>`__                                                          | Panama, Bulgaria, China, US                |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |coinmarketcap|        | coinmarketcap        | `CoinMarketCap <https://coinmarketcap.com>`__                  | 1     | `API <https://coinmarketcap.com/api>`__                                                          | US                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |coinmate|             | coinmate             | `CoinMate <https://coinmate.io>`__                             | \*    | `API <http://docs.coinmate.apiary.io>`__                                                         | UK, Czech Republic                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |coinsecure|           | coinsecure           | `Coinsecure <https://coinsecure.in>`__                         | 1     | `API <https://api.coinsecure.in>`__                                                              | India                                      |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |coinspot|             | coinspot             | `CoinSpot <https://www.coinspot.com.au>`__                     | \*    | `API <https://www.coinspot.com.au/api>`__                                                        | Australia                                  |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |cryptopia|            | cryptopia            | `Cryptopia <https://www.cryptopia.co.nz>`__                    | \*    | `API <https://www.cryptopia.co.nz/Forum/Thread/255>`__                                           | New Zealand                                |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |dsx|                  | dsx                  | `DSX <https://dsx.uk>`__                                       | \*    | `API <https://api.dsx.uk>`__                                                                     | UK                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |exmo|                 | exmo                 | `EXMO <https://exmo.me>`__                                     | 1     | `API <https://exmo.me/ru/api_doc>`__                                                             | Spain, Russia                              |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |flowbtc|              | flowbtc              | `flowBTC <https://trader.flowbtc.com>`__                       | 1     | `API <http://www.flowbtc.com.br/api/>`__                                                         | Brazil                                     |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |foxbit|               | foxbit               | `FoxBit <https://foxbit.exchange>`__                           | 1     | `API <https://blinktrade.com/docs>`__                                                            | Brazil                                     |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |fybse|                | fybse                | `FYB-SE <https://www.fybse.se>`__                              | \*    | `API <http://docs.fyb.apiary.io>`__                                                              | Sweden                                     |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |fybsg|                | fybsg                | `FYB-SG <https://www.fybsg.com>`__                             | \*    | `API <http://docs.fyb.apiary.io>`__                                                              | Singapore                                  |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |gatecoin|             | gatecoin             | `Gatecoin <https://gatecoin.com>`__                            | \*    | `API <https://gatecoin.com/api>`__                                                               | Hong Kong                                  |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |gdax|                 | gdax                 | `GDAX <https://www.gdax.com>`__                                | \*    | `API <https://docs.gdax.com>`__                                                                  | US                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |gemini|               | gemini               | `Gemini <https://gemini.com>`__                                | 1     | `API <https://docs.gemini.com/rest-api>`__                                                       | US                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |hitbtc|               | hitbtc               | `HitBTC <https://hitbtc.com>`__                                | 1     | `API <https://hitbtc.com/api>`__                                                                 | Hong Kong                                  |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |hitbtc2|              | hitbtc2              | `HitBTC v2 <https://hitbtc.com>`__                             | 2     | `API <https://api.hitbtc.com/api/2/explore>`__                                                   | Hong Kong                                  |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |huobi|                | huobi                | `Huobi <https://www.huobi.com>`__                              | 3     | `API <https://github.com/huobiapi/API_Docs_en/wiki>`__                                           | China                                      |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |huobicny|             | huobicny             | `Huobi CNY <https://www.huobi.com>`__                          | 1     | `API <https://github.com/huobiapi/API_Docs/wiki/REST_api_reference>`__                           | China                                      |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |huobipro|             | huobipro             | `Huobi Pro <https://www.huobi.pro>`__                          | 1     | `API <https://github.com/huobiapi/API_Docs/wiki/REST_api_reference>`__                           | China                                      |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |independentreserve|   | independentreserve   | `Independent Reserve <https://www.independentreserve.com>`__   | \*    | `API <https://www.independentreserve.com/API>`__                                                 | Australia, New Zealand                     |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |itbit|                | itbit                | `itBit <https://www.itbit.com>`__                              | 1     | `API <https://api.itbit.com/docs>`__                                                             | US                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |jubi|                 | jubi                 | `jubi.com <https://www.jubi.com>`__                            | 1     | `API <https://www.jubi.com/help/api.html>`__                                                     | China                                      |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |kraken|               | kraken               | `Kraken <https://www.kraken.com>`__                            | 0     | `API <https://www.kraken.com/en-us/help/api>`__                                                  | US                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |lakebtc|              | lakebtc              | `LakeBTC <https://www.lakebtc.com>`__                          | 2     | `API <https://www.lakebtc.com/s/api_v2>`__                                                       | US                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |livecoin|             | livecoin             | `LiveCoin <https://www.livecoin.net>`__                        | \*    | `API <https://www.livecoin.net/api?lang=en>`__                                                   | US, UK, Russia                             |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |liqui|                | liqui                | `Liqui <https://liqui.io>`__                                   | 3     | `API <https://liqui.io/api>`__                                                                   | Ukraine                                    |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |luno|                 | luno                 | `luno <https://www.luno.com>`__                                | 1     | `API <https://www.luno.com/en/api>`__                                                            | UK, Singapore, South Africa                |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |mercado|              | mercado              | `Mercado Bitcoin <https://www.mercadobitcoin.com.br>`__        | 3     | `API <https://www.mercadobitcoin.com.br/api-doc>`__                                              | Brazil                                     |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |mixcoins|             | mixcoins             | `MixCoins <https://mixcoins.com>`__                            | 1     | `API <https://mixcoins.com/help/api/>`__                                                         | UK, Hong Kong                              |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |nova|                 | nova                 | `Novaexchange <https://novaexchange.com>`__                    | 2     | `API <https://novaexchange.com/remote/faq>`__                                                    | Tanzania                                   |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |okcoincny|            | okcoincny            | `OKCoin CNY <https://www.okcoin.cn>`__                         | 1     | `API <https://www.okcoin.cn/rest_getStarted.html>`__                                             | China                                      |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |okcoinusd|            | okcoinusd            | `OKCoin USD <https://www.okcoin.com>`__                        | 1     | `API <https://www.okcoin.com/rest_getStarted.html>`__                                            | China, US                                  |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |okex|                 | okex                 | `OKEX <https://www.okex.com>`__                                | 1     | `API <https://www.okex.com/rest_getStarted.html>`__                                              | China, US                                  |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |paymium|              | paymium              | `Paymium <https://www.paymium.com>`__                          | 1     | `API <https://github.com/Paymium/api-documentation>`__                                           | France, EU                                 |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |poloniex|             | poloniex             | `Poloniex <https://poloniex.com>`__                            | \*    | `API <https://poloniex.com/support/api/>`__                                                      | US                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |quadrigacx|           | quadrigacx           | `QuadrigaCX <https://www.quadrigacx.com>`__                    | 2     | `API <https://www.quadrigacx.com/api_info>`__                                                    | Canada                                     |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |quoine|               | quoine               | `QUOINE <https://www.quoine.com>`__                            | 2     | `API <https://developers.quoine.com>`__                                                          | Japan, Singapore, Vietnam                  |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |southxchange|         | southxchange         | `SouthXchange <https://www.southxchange.com>`__                | \*    | `API <https://www.southxchange.com/Home/Api>`__                                                  | Argentina                                  |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |surbitcoin|           | surbitcoin           | `SurBitcoin <https://surbitcoin.com>`__                        | 1     | `API <https://blinktrade.com/docs>`__                                                            | Venezuela                                  |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |tidex|                | tidex                | `Tidex <https://tidex.com>`__                                  | 3     | `API <https://tidex.com/public-api>`__                                                           | UK                                         |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |therock|              | therock              | `TheRockTrading <https://therocktrading.com>`__                | 1     | `API <https://api.therocktrading.com/doc/v1/index.html>`__                                       | Malta                                      |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |urdubit|              | urdubit              | `UrduBit <https://urdubit.com>`__                              | 1     | `API <https://blinktrade.com/docs>`__                                                            | Pakistan                                   |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |vaultoro|             | vaultoro             | `Vaultoro <https://www.vaultoro.com>`__                        | 1     | `API <https://api.vaultoro.com>`__                                                               | Switzerland                                |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |vbtc|                 | vbtc                 | `VBTC <https://vbtc.exchange>`__                               | 1     | `API <https://blinktrade.com/docs>`__                                                            | Vietnam                                    |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |virwox|               | virwox               | `VirWoX <https://www.virwox.com>`__                            | \*    | `API <https://www.virwox.com/developers.php>`__                                                  | Austria, EU                                |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |wex|                  | wex                  | `WEX <https://wex.nz>`__                                       | 3     | `API <https://wex.nz/api/3/docs>`__                                                              | New Zealand                                |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |xbtce|                | xbtce                | `xBTCe <https://www.xbtce.com>`__                              | 1     | `API <https://www.xbtce.com/tradeapi>`__                                                         | Russia                                     |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |yobit|                | yobit                | `YoBit <https://www.yobit.net>`__                              | 3     | `API <https://www.yobit.net/en/api/>`__                                                          | Russia                                     |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |yunbi|                | yunbi                | `YUNBI <https://yunbi.com>`__                                  | 2     | `API <https://yunbi.com/documents/api/guide>`__                                                  | China                                      |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+
| |zaif|                 | zaif                 | `Zaif <https://zaif.jp>`__                                     | 1     | `API <http://techbureau-api-document.readthedocs.io/ja/latest/index.html>`__                     | Japan                                      |
+------------------------+----------------------+----------------------------------------------------------------+-------+--------------------------------------------------------------------------------------------------+--------------------------------------------+

Besides making basic market and limit orders, some exchanges offer margin trading (leverage), various derivatives (like futures contracts and options) and also have `dark pools <https://en.wikipedia.org/wiki/Dark_pool>`__, `OTC <https://en.wikipedia.org/wiki/Over-the-counter_(finance)>`__ (over-the-counter trading), merchant APIs and much more.

Instantiation
-------------

To connect to an exchange and start trading you need to instantiate an exchange class from ccxt library.

To get the full list of ids of supported exchanges programmatically:

.. code:: javascript

    // JavaScript
    const ccxt = require ('ccxt')
    console.log (ccxt.exchanges)

.. code:: python

    # Python
    import ccxt
    print (ccxt.exchanges)

.. code:: php

    // PHP
    include 'ccxt.php';
    var_dump (\ccxt\Exchange::$exchanges);

An exchange can be instantiated like shown in the examples below:

.. code:: javascript

    // JavaScript
    const ccxt = require ('ccxt')
    let exchange = new ccxt.kraken () // default id
    let kraken1 = new ccxt.kraken ({ id: 'kraken1' })
    let kraken2 = new ccxt.kraken ({ id: 'kraken2' })
    let id = 'gdax'
    let gdax = new ccxt[id] ();

.. code:: python

    # Python
    import ccxt
    exchange = ccxt.okcoinusd () # default id
    okcoin1 = ccxt.okcoinusd ({ 'id': 'okcoin1' })
    okcoin2 = ccxt.okcoinusd ({ 'id': 'okcoin2' })
    id = 'btcchina'
    btcchina = eval ('ccxt.%s ()' % id)
    gdax = getattr (ccxt, 'gdax') ()

The ccxt library in PHP uses builtin UTC/GMT time functions, therefore you are required to set date.timezone in your php.ini or call `date\_default\_timezone\_set () <http://php.net/manual/en/function.date-default-timezone-set.php>`__ function before using the PHP version of the library. The recommended timezone setting is ``"UTC"``.

.. code:: php

    // PHP
    date_default_timezone_set ('UTC');
    include 'ccxt.php';
    $bitfinex = new \ccxt\bitfinex (); // default id
    $bitfinex1 = new \ccxt\bitfinex (array ('id' => 'bitfinex1'));
    $bitfinex2 = new \ccxt\bitfinex (array ('id' => 'bitfinex2'));
    $id = 'kraken';
    $kraken = new \ccxt\$id ();

Exchange Structure
------------------

Every exchange has a set of properties and methods, most of which you can override by passing an associative array of params to an exchange constructor. You can also make a subclass and override everything.

Here's an overview of base exchange properties with values added for example:

.. code:: javascript

    {
        'id':   'exchange'                  // lowercase string exchange id
        'name': 'Exchange'                  // human-readable string
        'countries': [ 'US', 'CN', 'EU' ],  // string or array of ISO country codes
        'urls': {
            'api': 'https://api.example.com/data',  // string or dictionary of base API URLs
            'www': 'https://www.example.com'        // string website URL
            'doc': 'https://docs.example.com/api',  // string URL or array of URLs
        },
        'version':         'v1',            // string ending with digits
        'api':             { ... },         // dictionary of api endpoints
        'hasFetchTickers':  true,           // true if the exchange implements fetchTickers ()
        'hasFetchOHLCV':    false,          // true if the exchange implements fetchOHLCV ()
        'timeframes': {                     // empty if the exchange !hasFetchOHLCV
            '1m': '1minute',
            '1h': '1hour',
            '1d': '1day',
            '1M': '1month',
            '1y': '1year',
        },
        'timeout':          10000,          // number in milliseconds
        'rateLimit':        2000,           // number in milliseconds
        'userAgent':       'ccxt/1.1.1 ...' // string, HTTP User-Agent header
        'verbose':          false,          // boolean, output error details
        'markets':         { ... }          // dictionary of markets/pairs by symbol
        'symbols':         [ ... ]          // sorted list of string symbols (traded pairs)
        'currencies':      [ ... ]          // sorted list of strings (currency codes)
        'markets_by_id':   { ... },         // dictionary of dictionaries (markets) by id
        'proxy': 'https://crossorigin.me/', // string URL
        'apiKey':   '92560ffae9b8a0421...', // string public apiKey (ASCII, hex, Base64, ...)
        'secret':   '9aHjPmW+EtRRKN/Oi...'  // string private secret key
        'password': '6kszf4aci8r',          // string password
        'uid':      '123456',               // string user id
    }

Exchange Properties
~~~~~~~~~~~~~~~~~~~

Below is a detailed description of each of the base exchange properties:

-  ``id``: Each exchange has a default id. The id is not used for anything, it's a string literal for user-land exchange instance identification purposes. You can have multiple links to the same exchange and differentiate them by ids. Default ids are all lowercase and correspond to exchange names.

-  ``name``: This is a string literal containing the human-readable exchange name.

-  ``countries``: A string literal or an array of string literals of 2-symbol ISO country codes, where the exchange is operating from.

-  ``urls['api']``: The single string literal base URL for API calls or an associative array of separate URLs for private and public APIs.

-  ``urls['www']``: The main HTTP website URL.

-  ``urls['doc']``: A single string URL link to original documentation for exchange API on their website or an array of links to docs.

-  ``version``: A string literal containing version identifier for current exchange API. The ccxt library will append this version string to the API Base URL upon each request. You don't have to modify it, unless you are implementing a new exchange API. The version identifier is a usually a numeric string starting with a letter 'v' in some cases, like v1.1. Do not override it unless you are implementing your own new crypto exchange class.

-  ``api``: An associative array containing a definition of all API endpoints exposed by a crypto exchange. The API definition is used by ccxt to automatically construct callable instance methods for each available endpoint.

-  ``hasFetchTickers``: This is a boolean property indicating if the exchange has the fetchTickers () method available. When this property is false, the exchange will also throw a NotSupported exception upon a call to fetchTickers ().

-  ``hasFetchOHLCV``: This is a boolean property indicating if the exchange has the fetchOHLCV () method available. When this property is false, the exchange will also throw a NotSupported exception upon a call to fetchOHLCV (). Also, if this property is true, the ``timeframes`` property is populated as well.

-  ``timeframes``: An associative array of timeframes, supported by the fetchOHLCV method of the exchange. This is only populated when ``hasFetchTickers`` property is true.

-  ``timeout``: A timeout in milliseconds for a request-response roundtrip (default timeout is 10000 ms = 10 seconds). You should always set it to a reasonable value, hanging forever with no timeout is not your option, for sure.

-  ``rateLimit``: A request rate limit in milliseconds. Specifies the required minimal delay between two consequent HTTP requests to the same exchange. This parameter is not used for now (reserved for future).

-  ``userAgent``: An object to set HTTP User-Agent header to. The ccxt library will set its User-Agent by default. Some exchanges may not like it. If you are having difficulties getting a reply from an exchange and want to turn User-Agent off or use the default one, set this value to false, undefined, or an empty string.

-  ``verbose``: A boolean flag indicating whether to log HTTP requests to stdout (verbose flag is false by default).

-  ``markets``: An associative array of markets indexed by common trading pairs or symbols. Markets should be loaded prior to accessing this property. Markets are unavailable until you call the ``loadMarkets() / load_markets()`` method on exchange instance.

-  ``symbols``: A non-associative array (a list) of symbols available with an exchange, sorted in alphabetical order. These are the keys of the ``markets`` property. Symbols are loaded and reloaded from markets. This property is a convenient shorthand for all market keys.

-  ``currencies``: A non-associative array (a list) of currency codes (usually 3 or 4 letters) available with an exchange, sorted in alphabetical order. Currencies are loaded and reloaded from markets.

-  ``markets_by_id``: An associative array of markets indexed by exchange-specific ids. Markets should be loaded prior to accessing this property.

-  ``proxy``: A string literal containing base URL of http(s) proxy, ``''`` by default. For use with web browsers and from blocked locations. An example of a proxy string is ``'http://crossorigin.me/'``. The absolute exchange endpoint URL is appended to this string before sending the HTTP request.

-  ``apiKey``: This is your public API key string literal. Most exchanges require this for trading (`see below <https://github.com/kroitor/ccxt/wiki/Manual#api-keys-setup>`__).

-  ``secret``: Your private secret API key string literal. Most exchanges require this as well together with the apiKey.

-  ``password``: A string literal with your password/phrase. Some exchanges require this parameter for trading, but most of them don't.

-  ``uid``: A unique id of your account. This can be a string literal or a number. Some exchanges also require this for trading, but most of them don't.

Rate Limit
----------

Exchanges usually impose what is called a *rate limit*. Exchanges will remember and track your user credentials and your IP address and will not allow you to query the API too frequently. They balance their load and control traffic congestion to protect API servers from (D)DoS and misuse.

Most exchanges allow **up to 1 or 2 requests per second**. Exchanges may temporarily restrict your access to their API or ban you for some period of time if you are too aggressive with your requests.

**WARNING: Stay under the rate limit to avoid ban!**

DDoS Protection By Cloudflare / Incapsula
-----------------------------------------

Some exchanges are `DDoS <https://en.wikipedia.org/wiki/Denial-of-service_attack>`__-protected by `Cloudflare <https://www.cloudflare.com>`__ or `Incapsula <https://www.incapsula.com>`__. Your IP can get temporarily blocked during periods of high load. Sometimes they even restrict whole countries and regions. In that case their servers usually return a page that states a HTTP 40x error or runs an AJAX test of your browser / captcha test and delays the reload of the page for several seconds. Then your browser/fingerprint is granted access temporarily and gets added to a whitelist or receives a HTTP cookie for further use.

If you encounter DDoS protection errors and cannot reach a particular exchange then:
- try later
- use a proxy (this is less responsive, though)
- ask the exchange support to add you to a whitelist
- run your software in close proximity to the exchange (same country, same city, same datacenter, same server rack, same server)
- try an alternative IP within a different geographic region
- run your software in a distributed network of servers
- ...

The ccxt library will throw a DDoSProtectionError in case it hits a rate limit. A later retry is usually enough to handle that.

::

    UNDER CONSTRUCTION

Markets
=======

Each exchange is a place for trading some kinds of valuables. Sometimes they are called with various different terms like instruments, symbols, trading pairs, currencies, tokens, stocks, commodities, contracts, etc, but they all mean the same – a trading pair, a symbol or a financial instrument.

In terms of the ccxt library, every exchange offers multiple markets within itself. The set of markets differs from exchange to exchange opening possibilities for cross-exchange and cross-market arbitrage. A market is usually a pair of traded crypto/fiat currencies.

Market Structure
----------------

.. code:: javascript

    {
        'id':     'btcusd',  // string literal for referencing within an exchange
        'symbol': 'BTC/USD', // uppercase string literal of a pair of currencies
        'base':   'BTC',     // uppercase string, base currency, 3 or more letters
        'quote':  'USD',     // uppercase string, quote currency, 3 or more letters
        'info':   { ... },   // the original unparsed market info from the exchange
    }

Each market is an associative array (aka dictionary) with the following keys:
- ``id``. The string or numeric ID of the market or trade instrument within the exchange. Market ids are used inside exchanges internally to identify trading pairs during the request/response process.
- ``symbol``. An uppercase string code representation of a particular trading pair or instrument. This is usually written as ``BaseCurrency/QuoteCurrency`` with a slash as in ``BTC/USD``, ``LTC/CNY`` or ``ETH/EUR``, etc. Symbols are used to reference markets within the ccxt library (explained below).
- ``base``. An uppercase string code of base fiat or crypto currency.
- ``quote``. An uppercase string code of quoted fiat or crypto currency.
- ``info``. An associative array of non-common market properties, including fees, rates, limits and other general market information. The internal info array is different for each particular market, its contents depend on the exchange.

Loading Markets
---------------

In most cases you are required to load the list of markets and trading symbols for a particular exchange prior to accessing other API methods. If you forget to load markets the ccxt library will do that automatically upon your first call to the unified API. It will send two HTTP requests, first for markets and then the second one for other data, sequentially.

In order to load markets manually beforehand call the ``loadMarkets ()`` / ``load_markets ()`` method on an exchange instance. It returns an associative array of markets indexed by trading symbol. If you want more control over the execution of your logic, preloading markets by hand is recommended.

.. code:: javascript

    // JavaScript
    (async () => {
        let kraken = new ccxt.kraken ()
        let markets = await kraken.load_markets ()
        console.log (kraken.id, markets)
    }) ()

.. code:: python

    # Python
    okcoin = ccxt.okcoinusd ()
    markets = okcoin.load_markets ()
    print (okcoin.id, markets)

.. code:: php

    // PHP
    $id = 'huobi';
    $huobi = new \ccxt\$id ();
    $markets = $huobi.load_markets ();
    var_dump ($huobi->id, $markets);

Market Ids And Symbols
----------------------

Market ids are used during the REST request-response process to reference trading pairs within exchanges. The set of market ids is unique per exchange and cannot be used across exchanges. For example, the BTC/USD pair/market may have different ids on various popular exchanges, like ``btcusd``, ``BTCUSD``, ``XBTUSD``, ``btc/usd``, ``42`` (numeric id), ``BTC/USD``, ``Btc/Usd``, ``tBTCUSD``, ``XXBTZUSD``. You don't need to remember or use market ids, they are there for internal HTTP request-response purposes inside exchange implementations.

The ccxt library abstracts uncommon market ids to symbols, standardized to a common format. Symbols are not the same as market ids. Every market is referenced by a corresponding symbol. Symbols are common across exchanges which makes them suitable for arbitrage and many other things.

A symbol is an uppercase string literal name for a pair of traded currencies with a slash in between. A currency is a code of three or four uppercase letters, like ``BTC``, ``ETH``, ``USD``, ``GBP``, ``CNY``, ``LTC``, ``JPY``, ``DOGE``, ``RUB``, ``ZEC``, ``XRP``, ``XMR``, etc. Some exchanges have exotic currencies with longer names. The first currency before the slash is usually called *base currency*, and the one after the slash is called *quote currency*. Examples of a symbol are: ``BTC/USD``, ``DOGE/LTC``, ``ETH/EUR``, ``DASH/XRP``, ``BTC/CNY``, ``ZEC/XMR``, ``ETH/JPY``.

Market structures are indexed by symbols and ids. The base exchange class also has builtin methods for accessing markets by symbols. Most API methods require a symbol to be passed in their first parameter. You are often required to specify a symbol when querying current prices, making orders, etc.

Most of the time users will be working with market symbols. You will get a standard userland exception if you access non-existent keys in these dicts.

.. code:: javascript

    // JavaScript

    (async () => {

        console.log (await exchange.loadMarkets ())

        let btcusd1 = exchange.markets['BTC/USD']     // get market structure by symbol
        let btcusd2 = exchange.market ('BTC/USD')     // same result in a slightly different way

        let btcusdId = exchange.marketId ('BTC/USD')  // get market id by symbol

        let symbols = exchange.symbols                // get an array of symbols
        let symbols2 = Object.keys (exchange.markets) // same as previous line

        console.log (exchange.id, symbols)            // print all symbols

        let currencies = exchange.currencies          // a list of currencies

        let bitfinex = new ccxt.bitfinex ()
        await bitfinex.loadMarkets ()

        bitfinex.markets['BTC/USD']                   // symbol → market (get market by symbol)
        bitfinex.marketsById['XRPBTC']                // id → market (get market by id)

        bitfinex.markets['BTC/USD']['id']             // symbol → id (get id by symbol)
        bitfinex.marketsById['XRPBTC']['symbol']      // id → symbol (get symbol by id)

    })

.. code:: python

    # Python

    print (exchange.load_markets ())

    etheur1 = exchange.markets['ETH/EUR']      # get market structure by symbol
    etheur2 = exchange.market ('ETH/EUR')      # same result in a slightly different way

    etheurId = exchange.market_id ('BTC/USD')  # get market id by symbol

    symbols = exchange.symbols                 # get a list of symbols
    symbols2 = list (exchange.markets.keys ()) # same as previous line

    print (exchange.id, symbols)               # print all symbols

    currencies = exchange.currencies           # a list of currencies

    kraken = ccxt.kraken ()
    kraken.load_markets ()

    kraken.markets['BTC/USD']                  # symbol → market (get market by symbol)
    kraken.markets_by_id['XXRPZUSD']           # id → market (get market by id)

    kraken.markets['BTC/USD']['id']            # symbol → id (get id by symbol)
    kraken.markets_by_id['XXRPZUSD']['symbol'] # id → symbol (get symbol by id)

.. code:: php

    // PHP

    $var_dump ($exchange->load_markets ());

    $dashcny1 = $exchange->markets['DASH/CNY'];     // get market structure by symbol
    $dashcny2 = $exchange->market ('DASH/CNY');     // same result in a slightly different way

    $dashcnyId = $exchange->market_id ('DASH/CNY'); // get market id by symbol

    $symbols = $exchange->symbols;                  // get an array of symbols
    $symbols2 = array_keys ($exchange->markets);    // same as previous line

    var_dump ($exchange->id, $symbols);             // print all symbols

    $currencies = $exchange->currencies;            // a list of currencies

    $okcoinusd = '\\ccxt\\okcoinusd';
    $okcoinusd = new $okcoinusd ();

    $okcoinusd->load_markets ();

    $okcoinusd->markets['BTC/USD'];                 // symbol → market (get market by symbol)
    $okcoinusd->markets_by_id['btc_usd'];           // id → market (get market by id)

    $okcoinusd->markets['BTC/USD']['id'];           // symbol → id (get id by symbol)
    $okcoinusd->markets_by_id['btc_usd']['symbol']; // id → symbol (get symbol by id)

Naming Consistency
~~~~~~~~~~~~~~~~~~

There is a bit of term ambiguity across various exchanges that may cause confusion among newcoming traders. Some exchanges call markets as *pairs*, whereas other exchanges call symbols as *products*. In terms of the ccxt library, each exchange contains one or more trading markets. Each market has an id and a symbol. Most symbols are pairs of base currency and quote currency.

``Exchanges → Markets → Symbols → Currencies``

Historically various symbolic names have been used to designate same trading pairs. Some cryptocurrencies (like Dash) even changed their names more than once during their ongoing lifetime. For consistency across exchanges the ccxt library will perform the following known substitutions for symbols and currencies:

-  ``XBT → BTC``: ``XBT`` is newer but ``BTC`` is more common among exchanges and sounds more like bitcoin (`read more <https://www.google.ru/search?q=xbt+vs+btc>`__).
-  ``BCC → BCH``: The Bitcoin Cash fork is often called with two different symbolic names: ``BCC`` and ``BCH``. The name ``BCC`` is ambiguous for Bitcoin Cash, it is confused with BitConnect. The ccxt library will convert ``BCC`` to ``BCH`` where it is appropriate (some exchanges and aggregators confuse them).
-  ``DRK → DASH``: ``DASH`` was Darkcoin then became Dash (`read more <https://minergate.com/blog/dashcoin-and-dash/>`__).
-  ``DSH → DASH``: Try not to confuse symbols and currencies. The ``DSH`` (Dashcoin) is not the same as ``DASH`` (Dash). Some exchanges have ``DASH`` labelled inconsistently as ``DSH``, the ccxt library does a correction for that as well (``DSH → DASH``), but only on certain exchanges that have these two currencies confused, whereas most exchanges have them both correct. Just remember that ``DASH/BTC`` is not the same as ``DSH/BTC``.

Market Cache Force Reload
-------------------------

The ``loadMarkets () / load_markets ()`` is also a dirty method with a side effect of saving the array of markets on the exchange instance. You only need to call it once per exchange. All subsequent calls to the same method will return the locally saved (cached) array of markets.

When exchange markets are loaded, you can then access market information any time via the ``markets`` property. This property contains an associative array of markets indexed by symbol. If you need to force reload the list of markets after you have them loaded already, pass the reload = true flag to the same method again.

.. code:: javascript

    // JavaScript
    (async () => {
        let kraken = new ccxt.kraken ({ verbose: true }) // log HTTP requests
        await kraken.load_markets () // request markets
        console.log (kraken.id, kraken.markets)    // output a full list of all loaded markets
        console.log (Object.keys (kraken.markets)) // output a short list of market symbols
        console.log (kraken.markets['BTC/USD'])    // output single market details
        await kraken.load_markets () // return a locally cached version, no reload
        let reloadedMarkets = await kraken.load_markets (true) // force HTTP reload = true
        console.log (reloadedMarkets['ETH/BTC'])
    }) ()

.. code:: python

    # Python
    poloniex = ccxt.poloniex ({ 'verbose': True }) # log HTTP requests
    poloniex.load_markets () # request markets
    print (poloniex.id, poloniex.markets)   # output a full list of all loaded markets
    print (list (poloniex.markets.keys ())) # output a short list of market symbols
    print (poloniex.markets['BTC/ETH'])     # output single market details
    poloniex.load_markets () # return a locally cached version, no reload
    reloadedMarkets = poloniex.load_markets (True) # force HTTP reload = True
    print (reloadedMarkets['ETH/ZEC'])

.. code:: php

    // PHP
    $bitfinex = new \ccxt\bitfinex (array ('verbose' => true)); // log HTTP requests
    $bitfinex.load_markets (); // request markets
    var_dump ($bitfinex->id, $bitfinex->markets); // output a full list of all loaded markets
    var_dump (array_keys ($bitfinex->markets));   // output a short list of market symbols
    var_dump ($bitfinex->markets['XRP/USD']);     // output single market details
    $bitfinex->load_markets (); // return a locally cached version, no reload
    $reloadedMarkets = $bitfinex->load_markets (true); // force HTTP reload = true
    var_dump ($bitfinex->markets['XRP/BTC']);

API Methods / Endpoints
=======================

Each exchange offers a set of API methods. Each method of the API is called an *endpoint*. Endpoints are HTTP URLs for querying various types of information. All endpoints return JSON in response to client requests.

Usually, there is an endpoint for getting a list of markets from an exchange, an endpoint for retrieving an order book for a particular market, an endpoint for retrieving trade history, endpoints for placing and cancelling orders, for money deposit and withdrawal, etc... Basically every kind of action you could perform within a particular exchange has a separate endpoint URL offered by the API.

Because the set of methods differs from exchange to exchange, the ccxt library implements the following:
- a public and private API for all possible URLs and methods
- a unified API supporting a subset of common methods

The endpoint URLs are predefined in the ``api`` property for each exchange. You don't have to override it, unless you are implementing a new exchange API (at least you should know what you're doing).

The endpoint definition is a list of all API URLs exposed by an exchange. This list gets converted to callable methods upon exchange instantiation. Each URL in the API endpoint list gets a corresponding callable method. For example, if an exchange offers an HTTP GET URL for querying prices like ``https://example.com/public/quotes``, it is converted to a method named ``example.publicGetQuotes () / $example->publicGetQuotes ()``. This is done automatically for all exchanges, therefore the ccxt library supports all possible URLs offered by crypto exchanges.

Public/Private API
------------------

API URLs are often grouped into two sets of methods called a *public API* for market data and a *private API* for trading and account access. These groups of API methods are usually prefixed with a word 'public' or 'private'.

A public API is used to access market data and does not require any authentication whatsoever. Most exchanges provide market data openly to all (under their rate limit). With the ccxt library anyone can access market data out of the box without having to register with the exchanges and without setting up account keys and passwords.

Public APIs include the following:
- instruments/trading pairs
- price feeds (exchange rates)
- order books (L1, L2, L3...)
- trade history (closed orders, transactions, executions)
- tickers (spot / 24h price)
- OHLCV series for charting
- other public endpoints

For trading with private API you need to obtain API keys from/to exchanges. It often means registering with exchanges and creating API keys with your account. Most exchanges require personal info or identification. Some kind of verification may be necessary as well.

If you want to trade you need to register yourself, this library will not create accounts or API keys for you. Some exchange APIs expose interface methods for registering an account from within the code itself, but most of exchanges don't. You have to sign up and create API keys with their websites.

Private APIs allow the following:
- manage personal account info
- query account balances
- trade by making market and limit orders
- create deposit addresses and fund accounts
- request withdrawal of fiat and crypto funds
- query personal open / closed orders
- query positions in margin/leverage trading
- get ledger history
- transfer funds between accounts
- use merchant services

Some exchanges offer the same logic under different names. For example, a public API is also often called *market data*, *basic*, *market*, *mapi*, *api*, *price*, etc... All of them mean a set of methods for accessing data available to public. A private API is also often called *trading*, *trade*, *tapi*, *exchange*, *account*, etc...

A few exchanges also expose a merchant API which allows you to create invoices and accept crypto and fiat payments from your clients. This kind of API is often called *merchant*, *wallet*, *payment*, *ecapi* (for e-commerce).

To get a list of all available methods with an exchange instance, you can simply do the following:

::

    console.log (new ccxt.kraken ())   // JavaScript
    print (dir (ccxt.hitbtc ()))        # Python
    var_dump (new \ccxt\okcoinusd ()); // PHP

Synchronous vs Asynchronous Calls
---------------------------------

In the JavaScript version of CCXT all methods are asynchronous and return `Promises <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`__ that resolve with a decoded JSON object. In CCXT we use the modern *async/await* syntax to work with Promises. If you're not familiar with that syntax, you can read more about it `here <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function>`__.

.. code:: javascript

    // JavaScript

    (async () => {
        let pairs = await kraken.publicGetSymbolsDetails ()
        let marketIds = Object.keys (pairs['result'])
        let marketId = marketIds[0]
        let ticker = await kraken.publicGetTicker ({ pair: marketId })
        console.log (kraken.id, marketId, ticker)
    }) ()

The ccxt library supports asynchronous concurrency mode in Python 3.5+ with async/await syntax. The asynchronous Python version uses pure `asyncio <https://docs.python.org/3/library/asyncio.html>`__ with `aiohttp <http://aiohttp.readthedocs.io>`__. In async mode you have all the same properties and methods, but most methods are decorated with an async keyword. If you want to use async mode, you should link against the ``ccxt.async`` subpackage, like in the following example:

.. code:: python

    # Python

    import asyncio
    import ccxt.async as ccxt

    async def print_poloniex_ethbtc_ticker():
        poloniex = ccxt.poloniex()
        print(await poloniex.fetch_ticker('ETH/BTC'))

    asyncio.get_event_loop().run_until_complete(print_poloniex_ethbtc_ticker)

In PHP all API methods are synchronous.

Returned JSON Objects
---------------------

All public and private API methods return raw decoded JSON objects in response from the exchanges, as is, untouched. The unified API returns JSON-decoded objects in a common format and structured uniformly across all exchanges.

Passing Parameters To API Methods
---------------------------------

The set of all possible API endpoints differs from exchange to exchange. Most of methods accept a single associative array (or a Python dict) of key-value parameters. The params are passed as follows:

::

    bitso.publicGetTicker ({ book: 'eth_mxn' })            // JavaScript
    zaif.api_get_ticker_pair ({ 'pair': 'btc_jpy' })        # Python
    $luno->public_get_ticker (array ('pair' => 'XBTIDR')); // PHP

For a full list of accepted method parameters for each exchange, please consult `API docs <#exchanges>`__.

API Method Naming Conventions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An exchange method name is a concatenated string consisting of type (public or private), HTTP method (GET, POST, PUT, DELETE) and endpoint URL path like in the following examples:

+-----------------------------+---------------------------------+------------------------+
| Method Name                 | Base API URL                    | Endpoint URL           |
+=============================+=================================+========================+
| publicGetIdOrderbook        | https://bitbay.net/API/Public   | {id}/orderbook         |
+-----------------------------+---------------------------------+------------------------+
| publicGetPairs              | https://bitlish.com/api         | pairs                  |
+-----------------------------+---------------------------------+------------------------+
| publicGetJsonMarketTicker   | https://www.bitmarket.net       | json/{market}/ticker   |
+-----------------------------+---------------------------------+------------------------+
| privateGetUserMargin        | https://bitmex.com              | user/margin            |
+-----------------------------+---------------------------------+------------------------+
| privatePostTrade            | https://btc-x.is/api            | trade                  |
+-----------------------------+---------------------------------+------------------------+
| tapiCancelOrder             | https://yobit.net               | tapi/CancelOrder       |
+-----------------------------+---------------------------------+------------------------+
| ...                         | ...                             | ...                    |
+-----------------------------+---------------------------------+------------------------+

The ccxt library supports both camelcase notation (preferred in JavaScript) and underscore notation (preferred in Python and PHP), therefore all methods can be called in either notation or coding style in any language. Both of these notations work in JavaScript, Python and PHP:

::

    exchange.methodName ()  // camelcase pseudocode
    exchange.method_name () // underscore pseudocode

::

    UNDER CONSTRUCTION

Unified API
-----------

The unified ccxt API is a subset of methods common among the exchanges. It currently contains the following methods:

-  ``fetchMarkets ()``: Fetches a list of all available markets from an exchange and returns an abstracted JSON-decoded response, an array of markets. Some exchanges do not have means for obtaining a list of markets via their online API, for those the list of markets is hardcoded.
-  ``loadMarkets ([reload])``: Loads the list of markets indexed by symbol and caches it with the exchange instance. Returns cached markets if loaded already, unless the ``reload = true`` flag is forced.
-  ``fetchOrderBook (symbol)``: Fetch an order book for a particular market trading symbol.
-  ``fetchTrades (symbol, [params = {}])``: Fetch recent trades for a particular trading symbol.
-  ``fetchTicker (symbol)``: Fetch latest ticker data by trading symbol.
-  ``fetchBalance ()``: Fetch Balance.
-  ``createOrder (symbol, type, side, amount[, price[, params]])``
-  ``createLimitBuyOrder (symbol, amount, price[, params])``
-  ``createLimitSellOrder (symbol, amount, price[, params])``
-  ``createMarketBuyOrder (symbol, amount[, params])``
-  ``createMarketSellOrder (symbol, amount[, params])``
-  ``cancelOrder (id)``
-  ...

Note, that most of methods of the unified API accept an optional ``params`` parameter. It is an associative array (a dictionary, empty by default) containing the params you want to override. Use the ``params`` dictionary if you need to pass a custom setting or an optional parameter to your unified query.

Market Data
===========

-  `Order Book / Market Depth <https://github.com/kroitor/ccxt/wiki/Manual#order-book--market-depth>`__
-  `Market Price <https://github.com/kroitor/ccxt/wiki/Manual#market-price>`__
-  `Price Tickers <https://github.com/kroitor/ccxt/wiki/Manual#price-tickers>`__
-  `Individually By Symbol <https://github.com/kroitor/ccxt/wiki/Manual#individually-by-symbol>`__
-  `All At Once <https://github.com/kroitor/ccxt/wiki/Manual#all-at-once>`__
-  `OHLCV Candlestick Charts <https://github.com/kroitor/ccxt/wiki/Manual#ohlcv-candlestick-charts>`__
-  `Public Trades And Closed Orders <https://github.com/kroitor/ccxt/wiki/Manual#trades-orders-executions-transactions>`__

Order Book / Market Depth
-------------------------

Exchanges expose information on open orders with bid (buy) and ask (sell) prices, volumes and other data. Usually there is a separate endpoint for querying current state (stack frame) of the *order book* for a particular market. An order book is also often called *market depth*. The order book information is used in the trading decision making process.

The structure of an order book is as follows:

.. code:: javascript

    {
        'bids': [
            [ price, amount ],
            [ price, amount ],
            ...
        ],
        'asks': [
            [ price, amount ],
            [ price, amount ],
            ...
        ],
        'timestamp': 1499280391811, // Unix Timestamp in milliseconds (seconds * 1000)
        'datetime': '2017-07-05T18:47:14.692Z', // ISO8601 datetime string with milliseconds
    }

Prices and amounts are floats. The bids array is sorted by price in descending order. The best (highest) bid price is the first element and the worst (lowest) bid price is the last element. The asks array is sorted by price in ascending order. The best (lowest) ask price is the first element and the worst (highest) ask price is the last element. Bid/ask arrays can be empty if there are no corresponding orders in the order book of an exchange.

Some exchanges return the stack of orders in various levels of details for analysis. It is either in full detail containing each and every order, or it is aggregated having slightly less detail where orders are grouped and merged by price and volume. The levels of detail or levels of order book aggregation are often number-labelled like L1, L2, L3... Having greater detail requires more traffic and bandwidth and is slower in general but gives a benefit of higher precision. Having less detail is usually faster, but may not be enough in some very specific cases. Some exchanges accept a second dictionary of extra parameters to the ``fetchOrderBook () / fetch_order_book ()`` function allowing you to get the level of aggregation you need.

.. code:: javascript

    // JavaScript
    delay = 2000 // milliseconds = seconds * 1000
    (async () => {
        for (symbol in exchange.markets) {
            console.log (await exchange.fetchOrderBook (symbol))
            await new Promise (resolve => setTimeout (resolve, delay)) // rate limit
        }
    }) ()

.. code:: python

    # Python
    delay = 2 # seconds
    for symbol in exchange.markets:
        print (exchange.fetch_order_book (symbol))
        time.sleep (delay) # rate limit

.. code:: php

    // PHP
    $delay = 2000000; // microseconds = seconds * 1000000
    foreach ($exchange->markets as $symbol => $market) {
        var_dump ($exchange->fetch_order_book ($symbol));
        usleep ($delay); // rate limit
    }

Market Price
~~~~~~~~~~~~

In order to get current best price (query market price) and calculate bidask spread take first elements from bid and ask, like so:

.. code:: javascript

    // JavaScript
    let orderbook = exchange.fetchOrderBook (exchange.symbols[0])
    let bid = orderbook.bids.length ? orderbook.bids[0][0] : undefined
    let ask = orderbook.asks.length ? orderbook.asks[0][0] : undefined
    let spread = (bid && ask) ? ask - bid : undefined
    console.log (exchange.id, 'market price', { bid, ask, spread })

.. code:: python

    # Python
    orderbook = exchange.fetch_order_book (exchange.symbols[0])
    bid = orderbook['bids'][0][0] if len (orderbook['bids']) > 0 else None
    ask = orderbook['asks'][0][0] if len (orderbook['asks']) > 0 else None
    spread = (ask - bid) if (bid and ask) else None
    print (exchange.id, 'market price', { 'bid': bid, 'ask': ask, 'spread': spread })

.. code:: php

    // PHP
    $orderbook = $exchange->fetch_order_book ($exchange->symbols[0]);
    $bid = count ($orderbook['bids']) ? $orderbook['bids'][0][0] : null;
    $ask = count ($orderbook['asks']) ? $orderbook['asks'][0][0] : null;
    $spread = ($bid && $ask) ? $ask - $bid : null;
    $result = array ('bid' => $bid, 'ask' => $ask, 'spread' => $spread);
    var_dump ($exchange->id, 'market price', $result);

Price Tickers
-------------

A price ticker contains statistics for a particular market/symbol for some period of time in recent past, usually last 24 hours. The structure of a ticker is as follows:

::

    {
        'info':      { the original non-modified unparsed reply from exchange API },
        'timestamp':   int (64-bit Unix Timestamp in milliseconds since Epoch 1 Jan 1970)
        'datetime':    ISO8601 datetime string with milliseconds
        'high':        float (highest price)
        'low':         float (lowest price)
        'bid':         float (current bid (buy) price)
        'ask':         float (current ask (sell) price)
        'vwap':        float (volume weighed average price)
        'open':        float (open price),
        'first':       float (price of first trade),
        'last':        float (price of last trade),
        'change':      float (percentage change),
        'average':     float (average),
        'baseVolume':  float (volume of base currency),
        'quoteVolume': float (volume of quote currency),
    }

Timestamp and datetime are both Universal Time Coordinated (UTC).

Individually By Symbol
~~~~~~~~~~~~~~~~~~~~~~

To get the individual ticker data from an exchange for each particular trading pair or symbol call the ``fetchTicker (symbol)``:

.. code:: javascript

    // JavaScript
    (async () => {
        console.log (await (exchange.fetchTicker ('BTC/USD'))) // ticker for BTC/USD
        let symbols = Object.keys (exchange.markets)
        let random = Math.floor ((Math.random () * symbols.length)) - 1
        console.log (exchange.fetchTicker (symbols[random])) // ticker for a random symbol
    }) ()

.. code:: python

    # Python
    import random
    print(exchange.fetch_ticker('LTC/ZEC')) # ticker for LTC/ZEC
    symbols = list(exchange.markets.keys())
    print(exchange.fetch_ticker(random.choice(symbols))) # ticker for a random symbol

.. code:: php

    // PHP (don't forget to set your timezone properly!)
    var_dump ($exchange->fetch_ticker ('ETH/CNY')); // ticker for ETH/CNY
    $symbols = array_keys ($exchange->markets);
    $random = rand () % count ($symbols);
    var_dump ($exchange->fetch_ticker ($symbols[$random])); // ticker for a random symbol

All At Once
~~~~~~~~~~~

Some markets (not all of them) also support fetching all tickers at once. See `their docs <https://github.com/kroitor/ccxt/wiki/Manual#exchanges>`__ for details. You can fetch all tickers with a single call like so:

.. code:: javascript

    // JavaScript
    (async () => {
        console.log (await (exchange.fetchTickers ())) // all tickers indexed by their symbols
    }) ()

.. code:: python

    # Python
    print(exchange.fetch_tickers()) # all tickers indexed by their symbols

.. code:: php

    // PHP
    var_dump ($exchange->fetch_tickers ()); // all tickers indexed by their symbols

Fetching all tickers requires more traffic than fetching a single ticker. If you only need one ticker, fetching by a particular symbol is faster in general. You probably want to fetch all tickers only if you really need all of them.

The structure of returned value is as follows:

.. code:: javascript

    {
        'info':    { ... }, // the original JSON response from the exchange as is
        'BTC/USD': { ... }, // a single ticker for BTC/USD
        'ETH/BTC': { ... }, // a ticker for ETH/BTC
        ...
    }

A general solution for fetching all tickers from all exchanges (even the ones that don't have a corresponding API endpoint) is on the way, this section will be updated soon.

::

    UNDER CONSTRUCTION

Async Mode / Concurrency
^^^^^^^^^^^^^^^^^^^^^^^^

::

    UNDER CONSTRUCTION

OHLCV Candlestick Charts
------------------------

.. code:: diff

    - this is under heavy development right now, contributions appreciated

Most exchanges have endpoints for fetching OHLCV data, but some of them don't. The exchange boolean (true/false) property named ``hasFetchOHLCV`` indicates whether the exchange supports candlestick data series or not.

The ``fetchOHLCV`` method is declared in the following way:

::

    fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {})

You can call the unified ``fetchOHLCV`` / ``fetch_ohlcv`` method to get the list of most recent OHLCV candles for a particular symbol like so:

.. code:: javascript

    // JavaScript
    let sleep = (ms) => new Promise (resolve => setTimeout (resolve, ms));
    if (exchange.hasFetchOHLCV) {
        (async () => {
            for (symbol in exchange.markets) {
                await sleep (exchange.rateLimit) // milliseconds
                console.log (await exchange.fetchOHLCV (symbol, '1m')) // one minute
            }
        }) ()
    }

.. code:: python

    # Python
    if exchange.hasFetchOHLCV:
        for symbol in exchange.markets:
            time.sleep (exchange.rateLimit / 1000) # time.sleep wants seconds
            print (exchange.fetch_ohlcv (symbol, '1d')) # one day

.. code:: php

    // PHP
    if ($exchange->hasFetchOHLCV)
        foreach ($exchange->markets as $symbol => $market) {
            usleep ($exchange.rateLimit * 1000); // usleep wants microseconds
            var_dump ($exchange->fetch_ohlcv ($symbol, '1M')); // one month
        }

To get the list of available timeframes for your exchange see the ``timeframes`` property. Note that it is only populated when ``hasFetchTickers`` is true as well.

The fetchOHLCV method shown above returns a list (a flat array) of OHLCV candles represented by the following structure:

::

    [
        [
            1504541580000, // UTC timestamp in milliseconds
            4235.4,        // (O)pen price
            4240.6,        // (H)ighest price
            4230.0,        // (L)owest price
            4230.7,        // (C)losing price
            37.72941911    // (V)olume
        ],
        ...
    ]

Trades, Orders, Executions, Transactions
----------------------------------------

.. code:: diff

    - this is under heavy development right now, contributions appreciated

You can call the unified ``fetchTrades`` / ``fetch_trades`` method to get the list of most recent trades for a particular symbol. The ``fetchTrades`` method is declared in the following way:

::

    async fetchTrades (symbol, params = {})

For example, if you want to print recent trades for all symbols one by one sequentially (mind the rateLimit!) you would do it like so:

.. code:: javascript

    // JavaScript
    let sleep = (ms) => new Promise (resolve => setTimeout (resolve, ms));
    (async () => {
        for (symbol in exchange.markets) {
            await sleep (exchange.rateLimit) // milliseconds
            console.log (await exchange.fetchTrades (symbol))
        }
    }) ()

.. code:: python

    # Python
    for symbol in exchange.markets:
        time.sleep (exchange.rateLimit / 1000) # time.sleep wants seconds
        print (exchange.fetch_trades (symbol))

.. code:: php

    // PHP
    foreach ($exchange->markets as $symbol => $market) {
        usleep ($exchange.rateLimit * 1000); // usleep wants microseconds
        var_dump ($exchange->fetch_trades ($symbol));
    }

The fetchTrades method shown above returns a list (a flat array) of trades represented by the following structure:

::

    [
        {
            'info':       { ... },                  // the original decoded JSON as is
            'id':        '12345-67890:09876/54321', // string trade id
            'timestamp':  1502962946216,            // Unix timestamp in milliseconds
            'datetime':  '2017-08-17 12:42:48.000', // ISO8601 datetime with milliseconds
            'symbol':    'ETH/BTC',                 // symbol
            'order':     '12345-67890:09876/54321', // string order id or undefined/None/null
            'type':      'limit',                   // order type, 'market', 'limit' or undefined/None/null
            'side':      'buy',                     // direction of the trade, 'buy' or 'sell'
            'price':      0.06917684,               // float price in quote currency
            'amount':     1.5,                      // amount of base currency
        },
        ...
    ]

Most exchanges return most of the above fields for each trade, though there are exchanges that don't return the type, the side, the trade id or the order id of the trade. Most of the time you are guaranteed to have the timestamp, the datetime, the symbol, the price and the amount of each trade.

Also, the ``fetchTrades ()`` / ``fetch_trades()`` method has an optional second argument ``params`` (an assoc-key array/dict, empty by default). You can use it to pass extra params (if supported by your exchange), for example, the offset, the sorting direction, the limit (count) of returned trades and some other params (see the API docs for your exchange for more details).

::

    UNDER CONSTRUCTION

Trading
=======

In order to be able to access your user account, perform algorithmic trading by placing market and limit orders, query balances, deposit and withdraw funds and so on, you need to obtain your API keys for authentication from each exchange you want to trade with. They usually have it available on a separate tab or page within your user account settings. API keys are exchange-specific and cannnot be interchanged under any circumstances.

Authentication
--------------

Authentication with all exchanges is handled automatically if provided with proper API keys. The process of authentication usually goes through the following pattern:

1. Generate new nonce. A nonce is an integer, often a Unix Timestamp in seconds or milliseconds (since epoch January 1, 1970). The nonce should be unique to a particular request and constantly increasing, so that no two requests share the same nonce. Each next request should have greater nonce than the previous request. **The default nonce is a 32-bit Unix Timestamp in seconds.**
2. Append public apiKey and nonce to other endpoint params, if any, then serialize the whole thing for signing.
3. Sign the serialized params using HMAC-SHA256/384/512 or MD5 with your secret key.
4. Append the signature in Hex or Base64 and nonce to HTTP headers or body.

This process may differ from exchange to exchange. Some exchanges may want the signature in a different encoding, some of them vary in header and body param names and formats, but the general pattern is the same for all of them.

The authentication is already handled for you, so you don't need to perform any of those steps manually unless you are implementing a new exchange class. The only thing you need for trading is the actual API key pair.

API Keys Setup
--------------

The API credentials usually include the following:

-  ``apiKey``. This is your public API Key and/or Token. This part is *non-secret*, it is included in your request header or body and sent over HTTPS in open text to identify your request. It is often a string in Hex or Base64 encoding or an UUID identifier.
-  ``secret``. This is your private key. Keep it secret, don't tell it to anybody. It is used to sign your requests locally before sending them to exchanges. The secret key does not get sent over the internet in the request-response process and should not be published or emailed. It is used together with the nonce to generate a cryptographically strong signature. That signature is sent with your public key to authenticate your identity. Each request has a unique nonce and therefore a unique cryptographic signature.
-  ``uid``. Some exchanges (not all of them) also generate a user id or *uid* for short. It can be a string or numeric literal. You should set it, if that is explicitly required by your exchange. See `their docs <https://github.com/kroitor/ccxt/wiki/Manual#exchanges>`__ for details.
-  ``password``. Some exchanges (not all of them) also require your password/phrase for trading. You should set this string, if that is explicitly required by your exchange. See `their docs <https://github.com/kroitor/ccxt/wiki/Manual#exchanges>`__ for details.

In order to create API keys find the API tab or button in your user settings on the exchange website. Then create your keys and copy-paste them to your config file. Your config file permissions should be set appropriately, unreadable to anyone except the owner.

**Remember to keep your secret key safe from unauthorized use, do not send or tell it to anybody. A leak of the secret key or a breach in security can cost you a fund loss.**

To set up an exchange for trading just assign the API credentials to an existing exchange instance or pass them to exchange constructor upon instantiation, like so:

.. code:: javascript

    // JavaScript

    const ccxt = require ('ccxt')

    // any time
    let kraken = new ccxt.kraken ()
    kraken.apiKey = 'YOUR_KRAKEN_API_KEY'
    kraken.secret = 'YOUR_KRAKEN_SECRET_KEY'

    // upon instantiation
    let okcoinusd = new ccxt.okcoinusd ({
        apiKey: 'YOUR_OKCOIN_API_KEY',
        secret: 'YOUR_OKCOIN_SECRET_KEY',
    })

.. code:: python

    # Python

    import ccxt

    # any time
    bitfinex = ccxt.bitfinex ()
    bitfinex.apiKey = 'YOUR_BFX_API_KEY'
    bitfinex.secret = 'YOUR_BFX_SECRET'

    # upon instantiation
    hitbtc = ccxt.hitbtc ({
        'apiKey': 'YOUR_HITBTC_API_KEY',
        'secret': 'YOUR_HITBTC_SECRET_KEY',
    })

.. code:: php

    // PHP

    include 'ccxt.php'

    // any time
    $quoine = new \ccxt\quoine ();
    $quoine->apiKey = 'YOUR_QUOINE_API_KEY';
    $quoine->secret = 'YOUR_QUOINE_SECRET_KEY';

    // upon instantiation
    $zaif = new \ccxt\zaif (array (
        'apiKey' => 'YOUR_ZAIF_API_KEY',
        'secret' => 'YOUR_ZAIF_SECRET_KEY'
    ));

Note that your private requests will fail with an exception or error if you don't set up your API credentials before you start trading. To avoid character escaping **always write your credentials in single quotes**, not double quotes (``'VERY_GOOD'``, ``"VERY_BAD"``).

Querying Account Balance
------------------------

The structure of returned balance info is as follows:

.. code:: javascript

    {
        'info': { ... },     // the original untouched non-parsed reply with details

        'BTC': {             // string, three-letter currency code, uppercase
            'free': 321.00   // float, money available for trading
            'used': 234.00,  // float, money on hold, locked, frozen or pending
            'total': 555.00, // float, total balance (free + used)
        },

        'USD': {
            'free': 123.00   // ...
            'used': 456.00,
            'total': 579.00,
        },

        ...
    }

Some exchanges may not return full balance info. Many exchanges do not return balances for your empty or unused accounts. In that case some currencies may be missing in returned balance structure.

Also, some exchanges cannot return certain fields and are only capable of telling a total balance (without details). Therefore some or all of the free, used and total amounts may be undefined, None or null. You need to account for that when working with returned balances.

.. code:: javascript

    // JavaScript
    (async () => {
        console.log (await exchange.fetchBalance ())
    }) ()

.. code:: python

    # Python
    print (exchange.fetch_balance ())

.. code:: php

    // PHP
    var_dump ($exchange->fetch_balance ());

Placing Orders
--------------

To place an order you will need the following information:

-  ``symbol``, a string literal symbol of the market you wish to trade on, like ``BTC/USD``, ``ZEC/ETH``, ``DOGE/DASH``, etc...
-  ``side``, a string literal for the direction of your order, ``buy`` or ``sell``. When you place a buy order you give quote currency and receive base currency. For example, buying ``BTC/USD`` means that you will receive bitcoins for your dollars. When you are selling ``BTC/USD`` the outcome is the opposite and you receive dollars for your bitcoins.
-  ``type``, a string literal type of order, ccxt currently supports ``market`` and ``limit`` orders
-  ``amount``, how much of currency you want to trade. This usually refers to base currency of the trading pair symbol, though some exchanges require the amount in quote currency and a few of them require base or quote amount depending on the side of the order. See their API docs for details.
-  ``price``, how much quote currency you are willing to pay for a trade lot of base currency (for limit orders only)

A successful call to a unified method for placing market or limit orders returns the following structure:

.. code:: javascript

    {
        'id': 'string',  // order id
        'info': { ... }, // decoded original JSON response from the exchange as is
    }

**Some exchanges will allow to trade with limit orders only.** See `their docs <https://github.com/kroitor/ccxt/wiki/Manual#exchanges>`__ for details.

Market Orders
~~~~~~~~~~~~~

Market price orders are also known as *spot price orders*, *instant orders* or simply *market orders*. A market order gets executed immediately. The matching engine of the exchange closes the order (fulfills it) with one or more transactions from the top of the order book stack.

The exchange will close your market order for the best price available. You are not guaranteed though, that the order will be executed for the price you observe prior to placing your order. There can be a slight change of the price for the traded market while your order is being executed, also known as *price slippage*. The price can slip because of networking roundtrip latency, high loads on the exchange, price volatility and other factors. When placing a market order you don't need to specify the price of the order.

Note, that some exchanges will not accept market orders (they allow limit orders only).

::

    // camelCaseNotation
    exchange.createMarketBuyOrder (symbol, amount[, params])
    exchange.createMarketSellOrder (symbol, amount[, params])

    // underscore_notation
    exchange.create_market_buy_order (symbol, amount[, params])
    exchange.create_market_sell_order (symbol, amount[, params])

Limit Orders
~~~~~~~~~~~~

Limit price orders are also known as *limit orders*. Some exchanges accept limit orders only. Limit orders require a price (rate per unit) to be submitted with the order. The exchange will close limit orders if and only if market price reaches the desired level.

::

    // camelCaseStyle
    exchange.createLimitBuyOrder (symbol, amount, price[, params])
    exchange.createLimitSellOrder (symbol, amount, price[, params])

    // underscore_style
    exchange.create_limit_buy_order (symbol, amount, price[, params])
    exchange.create_limit_sell_order (symbol, amount, price[, params])

Custom Order Params
~~~~~~~~~~~~~~~~~~~

Some exchanges allow you to specify optional parameters for your order. You can pass your optional parameters and override your query with an associative array using the ``params`` argument to your unified API call.

.. code:: javascript

    // JavaScript
    // use a custom order type
    bitfinex.createLimitSellOrder ('BTC/USD', 1, 10, { 'type': 'trailing-stop' })

.. code:: python

    # Python
    # add a custom order flag
    kraken.create_market_buy_order('BTC/USD', 1, {'trading_agreement': 'agree'})

.. code:: php

    // PHP
    // add custom user id to your order
    $hitbtc->create_order ('BTC/USD', 'limit', 'buy', 1, 3000, array ('clientOrderId' => '123'));

Cancelling Orders
-----------------

To cancel an existing order pass the order id to ``cancelOrder (id) / cancel_order (id)`` method, like in the following examples:

.. code:: javascript

    // JavaScript
    exchange.cancelOrder ('1234567890') // replace with your order id here (a string)

.. code:: python

    # Python
    exchange.cancel_order ('1234567890') # replace with your order id here (a string)

.. code:: php

    // PHP
    $exchange->cancel_order ('1234567890'); // replace with your order id here (a string)

Querying Orders
---------------

.. code:: diff

    - this is under heavy development right now, contributions appreciated

By Order Id
~~~~~~~~~~~

::

    fetchOrder (id)

.. code:: javascript

    {
        'id':        '12345-67890:09876/54321', // string
        'timestamp':  1502962946216,            // Unix timestamp in milliseconds
        'datetime':  '2017-08-17 12:42:48.000', // ISO8601 datetime with milliseconds
        'status':    'open',                    // 'open', 'closed'
        'symbol':    'ETH/BTC',                 // symbol
        'type':      'limit',                   // 'market', 'limit'
        'side':      'buy',                     // 'buy', 'sell'
        'price':      0.06917684,               // float price in quote currency
        'amount':     1.5,                      // amount of base currency
        'trades':   [ ... ],                    // a list of order trades/executions
    }

All Orders
~~~~~~~~~~

Open Orders
~~~~~~~~~~~

Closed Orders
~~~~~~~~~~~~~

Transactions / Executions
~~~~~~~~~~~~~~~~~~~~~~~~~

Funding Your Account
--------------------

``UNDER CONSTRUCTION``

Deposit
~~~~~~~

``UNDER CONSTRUCTION``

Withdraw
~~~~~~~~

``UNDER CONSTRUCTION``

Ledger
~~~~~~

``UNDER CONSTRUCTION``

Overriding The Nonce
--------------------

**The default nonce is a 32-bit Unix Timestamp in seconds. You should override it with a milliseconds-nonce if you want to make private requests more frequently than once per second! Most exchanges will throttle your requests if you hit their rate limits, read `API docs for your exchange <https://github.com/kroitor/ccxt/wiki/Exchanges>`__ carefully!**

In case you need to reset the nonce it is much easier to create another pair of keys for using with private APIs. Creating new keys and setting up a fresh unused keypair in your config is usually enough for that.

In some cases you are unable to create new keys due to lack of permissions or whatever. If that happens you can still override the nonce. Base market class has the following methods for convenience:

-  ``seconds ()``: returns a Unix Timestamp in seconds.
-  ``milliseconds ()``: same in milliseconds (ms = 1000 \* s, thousandths of a second).
-  ``microseconds ()``: same in microseconds (μs = 1000 \* ms, millionths of a second).

There are exchanges that confuse milliseconds with microseconds in their API docs, let's all forgive them for that, folks. You can use methods listed above to override the nonce value. If you need to use the same keypair from multiple instances simultaneously use closures or a common function to avoid nonce conflicts. In Javascript you can override the nonce by providing a ``nonce`` parameter to the exchange constructor or by setting it explicitly on exchange object:

.. code:: javascript

    // JavaScript

    // A: custom nonce redefined in constructor parameters
    let nonce = 1
    let kraken1 = new ccxt.kraken ({ nonce: () => nonce++ })

    // B: nonce redefined explicitly
    let kraken2 = new ccxt.kraken ()
    kraken2.nonce = function () { return nonce++ } // uses same nonce as kraken1

    // C: milliseconds nonce
    let kraken3 = new ccxt.kraken ({
        nonce: function () { return this.milliseconds () },
    })

    // D: newer ES syntax
    let kraken4 = new ccxt.kraken ({
        nonce () { return this.milliseconds () },
    })

In Python and PHP you can do the same by subclassing and overriding nonce function of a particular exchange class:

.. code:: python

    # Python

    # A: custom nonce
    class MyKraken(ccxt.kraken):
        n = 1
        def nonce(self):
            return self.n += 1

    # B: milliseconds nonce
    class MyBitfinex(ccxt.bitfinex):
        def nonce(self):
            return self.milliseconds()

    # C: milliseconds nonce inline
    hitbtc = ccxt.hitbtc({
        'nonce': lambda: int(time.time() * 1000)
    })

.. code:: php

    // PHP

    // A: custom nonce value
    class MyOKCoinUSD extends \ccxt\okcoinusd {
        public function __construct ($options = array ()) {
            parent::__construct (array_merge (array ('i' => 1), $options));
        }
        public function nonce () {
            return $this->i++;
        }
    }

    // B: milliseconds nonce
    class MyZaif extends \ccxt\zaif {
        public function __construct ($options = array ()) {
            parent::__construct (array_merge (array ('i' => 1), $options));
        }
        public function nonce () {
            return $this->milliseconds ();
        }
    }

Error Handling
==============

All exceptions are derived from the base CCXTError exception, which, in its turn, is defined in the ccxt library like so:

.. code:: javascript

    // JavaScript
    class CCXTError extends Error {
        constructor () {
            super ()
            // a workaround to make `instanceof CCXTError` work in ES5
            this.constructor = CCXTError
            this.__proto__   = CCXTError.prototype
        }
    }

.. code:: python

    # Python
    class CCXTError (Exception):
        pass

.. code:: php

    // PHP
    class CCXTError extends \Exception {}

Below is an outline of exception inheritance hierarchy:

::

    + CCXTError
    |
    +---+ ExchangeError
    |   |
    |   +---+ NotSupported
    |   |
    |   +---+ AuthenticationError
    |   |
    |   +---+ InsufficientFunds
    |
    +---+ NetworkError (recoverable)
        |
        +---+ DDoSProtection
        |
        +---+ TimeoutError
        |
        +---+ ExchangeNotAvailable

-  ``CCXTError``: Generic error class for all sorts of errors, including accessibility and request/response mismatch. Users should catch this exception at the very least, if no error differentiation is required.
-  ``ExchangeError``: This exception is thrown when an exchange server replies with an error in JSON, possible reasons:
-  endpoint is switched off by the exchange
-  symbol not found on the exchange
-  some additional endpoint parameter required by the exchange is missing
-  the format of some parameters passed into the endpoint is incorrect
-  an exchange replies with an unclear answer
-  ``NotSupported``: This exception is raised if the endpoint is not offered/not supported by the exchange API.
-  ``InsufficientFunds``: This exception is raised when you don't have enough currency on your account to make an order.
-  ``AuthenticationError``: Raised when an exchange requires one of the API credentials that you've missed to specify, or when there's a mistake in the keypair or an outdated nonce. Most of the time you need ``apiKey`` and ``secret``, some times you also need ``uid`` and/or ``password``.
-  ``NetworkError``: All errors related to networking are usually recoverable, meaning that networking problems, traffic congestion, unavailability is usually time-dependent. Making a retry later is usually enough to recover from a NetworkError, but if it doesn't go away, then it may indicate some persistent problem with the exchange or with your connection.
-  ``DDoSProtection``: This exception is thrown whenever a Cloudflare / Incapsula / rate limiter restrictions are enforced upon on you or the region you're connecting from. The ccxt library does a case-insensitive match of the response received from the exchange to one of the following keywords:

   -  ``cloudflare``
   -  ``incapsula``

-  ``RequestTimeout``: The name literally says it all. This exception is raised when connection with the exchange fails or data is not fully received in a specified amount of time. This is controlled by the ``timeout`` option.
-  ``ExchangeNotAvailable``: The ccxt library throws this error if it detects any of the following keywords in response:

   -  ``offline``
   -  ``unavailable``
   -  ``busy``
   -  ``retry``
   -  ``wait``
   -  ``maintain``
   -  ``maintenance``
   -  ``maintenancing``

Troubleshooting
===============

In case you experience any difficulty connecting to a particular exchange, do the following in order of precedence:

1. Check the `CHANGELOG <https://github.com/kroitor/ccxt/blob/master/CHANGELOG.md>`__ for recent updates.
2. Turn ``verbose = true`` to get more detail about it.
3. Check you API credentials. Try a fresh new keypair if possible.
4. Read the `docs for your exchange <https://github.com/kroitor/ccxt/wiki/Exchanges>`__ and compare your verbose output to the docs.
5. Check your nonce. If you used your API keys with other software, you most likely should `override your nonce function <#overriding-the-nonce>`__ to match your previous nonce value. A nonce usually can be easily reset by generating a new unused keypair.
6. Check your connectivity with the exchange by accessing it with your browser.
7. Check your connection with the exchange through a proxy. Read the `Proxy <https://github.com/kroitor/ccxt/wiki/Install#proxy>`__ section for more details.
8. Try accesing the exchange from a different computer or a remote server, to see if this is a local or global issue with the exchange.
9. Check if there were any news from the exchange recently regarding downtime for maintenance. Some exchanges go offline for updates regularly (like once a week).

Notes
-----

-  Use the ``verbose = true`` option or instantiate your troublesome exchange with ``new ccxt.exchange ({ 'verbose': true })`` to see the HTTP exchange in details. The verbose output will also be of use for us to debug it if you submit an issue on GitHub.
-  As written above, some exchanges are not available in certain countries. You should use a proxy or get a server somewhere closer to the exchange.
-  If you are getting authentication errors or *'invalid keys'* errors, those are most likely due to a nonce issue.
-  Some exchanges do not state it clearly if they fail to authenticate your request. In those circumstances they might respond with an exotic error code, like HTTP 502 Bad Gateway Error or something that's even less related to the actual cause of the error.
-  ...

``UNDER CONSTRUCTION``

.. |_1broker| image:: https://user-images.githubusercontent.com/1294454/27766021-420bd9fc-5ecb-11e7-8ed6-56d0081efed2.jpg
.. |_1btcxe| image:: https://user-images.githubusercontent.com/1294454/27766049-2b294408-5ecc-11e7-85cc-adaff013dc1a.jpg
.. |acx| image:: https://user-images.githubusercontent.com/1294454/30247614-1fe61c74-9621-11e7-9e8c-f1a627afa279.jpg
.. |anxpro| image:: https://user-images.githubusercontent.com/1294454/27765983-fd8595da-5ec9-11e7-82e3-adb3ab8c2612.jpg
.. |binance| image:: https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg
.. |bit2c| image:: https://user-images.githubusercontent.com/1294454/27766119-3593220e-5ece-11e7-8b3a-5a041f6bcc3f.jpg
.. |bitbay| image:: https://user-images.githubusercontent.com/1294454/27766132-978a7bd8-5ece-11e7-9540-bc96d1e9bbb8.jpg
.. |bitcoincoid| image:: https://user-images.githubusercontent.com/1294454/27766138-043c7786-5ecf-11e7-882b-809c14f38b53.jpg
.. |bitfinex| image:: https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg
.. |bitfinex2| image:: https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg
.. |bitflyer| image:: https://user-images.githubusercontent.com/1294454/28051642-56154182-660e-11e7-9b0d-6042d1e6edd8.jpg
.. |bithumb| image:: https://user-images.githubusercontent.com/1294454/30597177-ea800172-9d5e-11e7-804c-b9d4fa9b56b0.jpg
.. |bitlish| image:: https://user-images.githubusercontent.com/1294454/27766275-dcfc6c30-5ed3-11e7-839d-00a846385d0b.jpg
.. |bitmarket| image:: https://user-images.githubusercontent.com/1294454/27767256-a8555200-5ef9-11e7-96fd-469a65e2b0bd.jpg
.. |bitmex| image:: https://user-images.githubusercontent.com/1294454/27766319-f653c6e6-5ed4-11e7-933d-f0bc3699ae8f.jpg
.. |bitso| image:: https://user-images.githubusercontent.com/1294454/27766335-715ce7aa-5ed5-11e7-88a8-173a27bb30fe.jpg
.. |bitstamp1| image:: https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg
.. |bitstamp| image:: https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg
.. |bittrex| image:: https://user-images.githubusercontent.com/1294454/27766352-cf0b3c26-5ed5-11e7-82b7-f3826b7a97d8.jpg
.. |bl3p| image:: https://user-images.githubusercontent.com/1294454/28501752-60c21b82-6feb-11e7-818b-055ee6d0e754.jpg
.. |bleutrade| image:: https://user-images.githubusercontent.com/1294454/30303000-b602dbe6-976d-11e7-956d-36c5049c01e7.jpg
.. |btcchina| image:: https://user-images.githubusercontent.com/1294454/27766368-465b3286-5ed6-11e7-9a11-0f6467e1d82b.jpg
.. |btcexchange| image:: https://user-images.githubusercontent.com/1294454/27993052-4c92911a-64aa-11e7-96d8-ec6ac3435757.jpg
.. |btcmarkets| image:: https://user-images.githubusercontent.com/1294454/29142911-0e1acfc2-7d5c-11e7-98c4-07d9532b29d7.jpg
.. |btctradeua| image:: https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg
.. |btcturk| image:: https://user-images.githubusercontent.com/1294454/27992709-18e15646-64a3-11e7-9fa2-b0950ec7712f.jpg
.. |btcx| image:: https://user-images.githubusercontent.com/1294454/27766385-9fdcc98c-5ed6-11e7-8f14-66d5e5cd47e6.jpg
.. |bter| image:: https://user-images.githubusercontent.com/1294454/27980479-cfa3188c-6387-11e7-8191-93fc4184ba5c.jpg
.. |bxinth| image:: https://user-images.githubusercontent.com/1294454/27766412-567b1eb4-5ed7-11e7-94a8-ff6a3884f6c5.jpg
.. |ccex| image:: https://user-images.githubusercontent.com/1294454/27766433-16881f90-5ed8-11e7-92f8-3d92cc747a6c.jpg
.. |cex| image:: https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg
.. |chbtc| image:: https://user-images.githubusercontent.com/1294454/28555659-f0040dc2-7109-11e7-9d99-688a438bf9f4.jpg
.. |chilebit| image:: https://user-images.githubusercontent.com/1294454/27991414-1298f0d8-647f-11e7-9c40-d56409266336.jpg
.. |coincheck| image:: https://user-images.githubusercontent.com/1294454/27766464-3b5c3c74-5ed9-11e7-840e-31b32968e1da.jpg
.. |coinfloor| image:: https://user-images.githubusercontent.com/1294454/28246081-623fc164-6a1c-11e7-913f-bac0d5576c90.jpg
.. |coingi| image:: https://user-images.githubusercontent.com/1294454/28619707-5c9232a8-7212-11e7-86d6-98fe5d15cc6e.jpg
.. |coinmarketcap| image:: https://user-images.githubusercontent.com/1294454/28244244-9be6312a-69ed-11e7-99c1-7c1797275265.jpg
.. |coinmate| image:: https://user-images.githubusercontent.com/1294454/27811229-c1efb510-606c-11e7-9a36-84ba2ce412d8.jpg
.. |coinsecure| image:: https://user-images.githubusercontent.com/1294454/27766472-9cbd200a-5ed9-11e7-9551-2267ad7bac08.jpg
.. |coinspot| image:: https://user-images.githubusercontent.com/1294454/28208429-3cacdf9a-6896-11e7-854e-4c79a772a30f.jpg
.. |cryptopia| image:: https://user-images.githubusercontent.com/1294454/29484394-7b4ea6e2-84c6-11e7-83e5-1fccf4b2dc81.jpg
.. |dsx| image:: https://user-images.githubusercontent.com/1294454/27990275-1413158a-645a-11e7-931c-94717f7510e3.jpg
.. |exmo| image:: https://user-images.githubusercontent.com/1294454/27766491-1b0ea956-5eda-11e7-9225-40d67b481b8d.jpg
.. |flowbtc| image:: https://user-images.githubusercontent.com/1294454/28162465-cd815d4c-67cf-11e7-8e57-438bea0523a2.jpg
.. |foxbit| image:: https://user-images.githubusercontent.com/1294454/27991413-11b40d42-647f-11e7-91ee-78ced874dd09.jpg
.. |fybse| image:: https://user-images.githubusercontent.com/1294454/27766512-31019772-5edb-11e7-8241-2e675e6797f1.jpg
.. |fybsg| image:: https://user-images.githubusercontent.com/1294454/27766513-3364d56a-5edb-11e7-9e6b-d5898bb89c81.jpg
.. |gatecoin| image:: https://user-images.githubusercontent.com/1294454/28646817-508457f2-726c-11e7-9eeb-3528d2413a58.jpg
.. |gdax| image:: https://user-images.githubusercontent.com/1294454/27766527-b1be41c6-5edb-11e7-95f6-5b496c469e2c.jpg
.. |gemini| image:: https://user-images.githubusercontent.com/1294454/27816857-ce7be644-6096-11e7-82d6-3c257263229c.jpg
.. |hitbtc| image:: https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg
.. |hitbtc2| image:: https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg
.. |huobi| image:: https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg
.. |huobicny| image:: https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg
.. |huobipro| image:: https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg
.. |independentreserve| image:: https://user-images.githubusercontent.com/1294454/30521662-cf3f477c-9bcb-11e7-89bc-d1ac85012eda.jpg
.. |itbit| image:: https://user-images.githubusercontent.com/1294454/27822159-66153620-60ad-11e7-89e7-005f6d7f3de0.jpg
.. |jubi| image:: https://user-images.githubusercontent.com/1294454/27766581-9d397d9a-5edd-11e7-8fb9-5d8236c0e692.jpg
.. |kraken| image:: https://user-images.githubusercontent.com/1294454/27766599-22709304-5ede-11e7-9de1-9f33732e1509.jpg
.. |lakebtc| image:: https://user-images.githubusercontent.com/1294454/28074120-72b7c38a-6660-11e7-92d9-d9027502281d.jpg
.. |livecoin| image:: https://user-images.githubusercontent.com/1294454/27980768-f22fc424-638a-11e7-89c9-6010a54ff9be.jpg
.. |liqui| image:: https://user-images.githubusercontent.com/1294454/27982022-75aea828-63a0-11e7-9511-ca584a8edd74.jpg
.. |luno| image:: https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg
.. |mercado| image:: https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg
.. |mixcoins| image:: https://user-images.githubusercontent.com/1294454/30237212-ed29303c-9535-11e7-8af8-fcd381cfa20c.jpg
.. |nova| image:: https://user-images.githubusercontent.com/1294454/30518571-78ca0bca-9b8a-11e7-8840-64b83a4a94b2.jpg
.. |okcoincny| image:: https://user-images.githubusercontent.com/1294454/27766792-8be9157a-5ee5-11e7-926c-6d69b8d3378d.jpg
.. |okcoinusd| image:: https://user-images.githubusercontent.com/1294454/27766791-89ffb502-5ee5-11e7-8a5b-c5950b68ac65.jpg
.. |okex| image:: https://user-images.githubusercontent.com/1294454/29562593-9038a9bc-8742-11e7-91cc-8201f845bfc1.jpg
.. |paymium| image:: https://user-images.githubusercontent.com/1294454/27790564-a945a9d4-5ff9-11e7-9d2d-b635763f2f24.jpg
.. |poloniex| image:: https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg
.. |quadrigacx| image:: https://user-images.githubusercontent.com/1294454/27766825-98a6d0de-5ee7-11e7-9fa4-38e11a2c6f52.jpg
.. |quoine| image:: https://user-images.githubusercontent.com/1294454/27766844-9615a4e8-5ee8-11e7-8814-fcd004db8cdd.jpg
.. |southxchange| image:: https://user-images.githubusercontent.com/1294454/27838912-4f94ec8a-60f6-11e7-9e5d-bbf9bd50a559.jpg
.. |surbitcoin| image:: https://user-images.githubusercontent.com/1294454/27991511-f0a50194-6481-11e7-99b5-8f02932424cc.jpg
.. |tidex| image:: https://user-images.githubusercontent.com/1294454/30781780-03149dc4-a12e-11e7-82bb-313b269d24d4.jpg
.. |therock| image:: https://user-images.githubusercontent.com/1294454/27766869-75057fa2-5ee9-11e7-9a6f-13e641fa4707.jpg
.. |urdubit| image:: https://user-images.githubusercontent.com/1294454/27991453-156bf3ae-6480-11e7-82eb-7295fe1b5bb4.jpg
.. |vaultoro| image:: https://user-images.githubusercontent.com/1294454/27766880-f205e870-5ee9-11e7-8fe2-0d5b15880752.jpg
.. |vbtc| image:: https://user-images.githubusercontent.com/1294454/27991481-1f53d1d8-6481-11e7-884e-21d17e7939db.jpg
.. |virwox| image:: https://user-images.githubusercontent.com/1294454/27766894-6da9d360-5eea-11e7-90aa-41f2711b7405.jpg
.. |wex| image:: https://user-images.githubusercontent.com/1294454/30652751-d74ec8f8-9e31-11e7-98c5-71469fcef03e.jpg
.. |xbtce| image:: https://user-images.githubusercontent.com/1294454/28059414-e235970c-662c-11e7-8c3a-08e31f78684b.jpg
.. |yobit| image:: https://user-images.githubusercontent.com/1294454/27766910-cdcbfdae-5eea-11e7-9859-03fea873272d.jpg
.. |yunbi| image:: https://user-images.githubusercontent.com/1294454/28570548-4d646c40-7147-11e7-9cf6-839b93e6d622.jpg
.. |zaif| image:: https://user-images.githubusercontent.com/1294454/27766927-39ca2ada-5eeb-11e7-972f-1b4199518ca6.jpg

